services:
    email-service:
        image: techcommerce/email-service:1.0.0
        container_name: email-service
        build:
            context: ./services/email
            dockerfile: Dockerfile
        depends_on:
            rabbitmq:
                condition: service_healthy
        environment:
            EMAIL_SERVICE_QUEUE_NAME: ${EMAIL_SERVICE_QUEUE_NAME}
            RABBITMQ_HOST: ${RABBITMQ_HOST}
            RABBITMQ_USER: ${RABBITMQ_USER}
            RABBITMQ_PASS: ${RABBITMQ_PASS}
            EMAIL_USER: ${EMAIL_USER}
            EMAIL_PASS: ${EMAIL_PASS}
        networks:
            - rabbitmq-network
        command: ["bun", "run", "dist/index.js"]

    identity-db:
        image: postgres:15
        container_name: identity-db
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "${IDENTITY_DB_USER}"]
            interval: 10s
            retries: 5
            start_period: 5s
        environment:
            POSTGRES_USER: ${IDENTITY_DB_USER}
            POSTGRES_PASSWORD: ${IDENTITY_DB_PASS}
            POSTGRES_DB: ${IDENTITY_DB_NAME}
        networks:
            - rabbitmq-network
            - identity-network
        volumes:
            - identity_db_data:/var/lib/postgresql/data

    identity-service:
        image: techcommerce/identity-service:1.0.0
        container_name: identity-service
        build:
            context: .
            dockerfile: ./services/identity/Dockerfile
        depends_on:
            identity-db:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        environment:
            JWT_EXPIRATION_TIME_IN_MINUTES: ${JWT_EXPIRATION_TIME_IN_MINUTES}
            RABBITMQ_HOST: ${RABBITMQ_HOST}
            RABBITMQ_USER: ${RABBITMQ_USER}
            RABBITMQ_PASS: ${RABBITMQ_PASS}
            EMAIL_SERVICE_QUEUE_NAME: ${EMAIL_SERVICE_QUEUE_NAME}
            IDENTITY_DB_USER: ${IDENTITY_DB_USER}
            IDENTITY_DB_PASS: ${IDENTITY_DB_PASS}
            IDENTITY_DB_NAME: ${IDENTITY_DB_NAME}
        expose:
            - 8080
        networks:
            - identity-network
            - rabbitmq-network

    kong:
        volumes:
            - ./services/gateway/kong.production.yml:/etc/kong/kong.yml:ro
        networks:
            - identity-network
    frontend:
        image: techcommerce/frontend:1.0.0
        container_name: frontend
        depends_on:
            - identity-service
            - kong
        build:
            context: ./frontend
            dockerfile: Dockerfile
            args:
                VITE_API_URL: ${VITE_API_URL}
        ports:
            - ${FRONTEND_PORT}:80
        networks:
            - techcommerce-network

networks:
    identity-network:
        name: identity-network
        driver: bridge

volumes:
    identity_db_data:
        name: identity_db_data

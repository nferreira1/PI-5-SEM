## Application name
spring.application.name=Identity Service

## Server Configuration
server.address=0.0.0.0
server.servlet.context-path=/identity

## Database Configuration
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=
spring.datasource.password=
spring.datasource.url=

## Specify the database dialect for JPA and Hibernate
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

## Spring terminal output in colors
spring.output.ansi.enabled=always

# Allows Spring to perform some initial INSERTS
spring.sql.init.mode=always

# API starts only after the database is ready
spring.jpa.defer-datasource-initialization=true

# Spring will automatically update/create tables as entities are updated/created
spring.jpa.hibernate.ddl-auto=update

# Server Configuration
server.error.include-exception=true

# Swagger Configuration
springdoc.swagger-ui.enabled=false
springdoc.api-docs.path=/api-docs

# JWT Configuration
jwt.expiration.time=${JWT_EXPIRATION_TIME_IN_MINUTES}

# SQS Configuration
spring.cloud.aws.credentials.access-key=${AWS_ACCESS_KEY_ID}
spring.cloud.aws.credentials.secret-key=${AWS_SECRET_ACCESS_KEY}
spring.cloud.aws.sqs.endpoint=${AWS_SQS_QUEUE_ENDPOINT}
spring.cloud.aws.sqs.queue-name=${EMAIL_SERVICE_QUEUE_NAME}
spring.cloud.aws.sqs.region=${AWS_DEFAULT_REGION}
basePath: /catalog
definitions:
  exceptions.Error:
    properties:
      field:
        type: string
      message:
        type: string
    type: object
  exceptions.ErrorResponseException:
    properties:
      errors:
        items:
          $ref: '#/definitions/exceptions.Error'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  models.CategoryRequest:
    properties:
      base64:
        type: string
      name:
        type: string
      status:
        type: boolean
    type: object
  models.CategoryResponse:
    properties:
      categoryId:
        type: string
      createdAt:
        type: string
      name:
        type: string
      updatedAt:
        type: string
      url:
        type: string
    type: object
  models.Product:
    properties:
      categoryId:
        type: string
      createdAt:
        type: string
      description:
        type: string
      images:
        items:
          $ref: '#/definitions/models.ProductImages'
        type: array
      name:
        type: string
      price:
        type: number
      productId:
        type: string
      status:
        type: boolean
      stock:
        type: integer
      updatedAt:
        type: string
    type: object
  models.ProductImages:
    properties:
      createdAt:
        type: string
      principal:
        type: boolean
      productId:
        type: string
      productImageId:
        type: integer
      url:
        type: string
    type: object
  models.ProductImagesRequest:
    properties:
      base64:
        type: string
      principal:
        type: boolean
    type: object
  models.ProductRequest:
    properties:
      categoryId:
        type: string
      description:
        type: string
      images:
        items:
          $ref: '#/definitions/models.ProductImagesRequest'
        type: array
      name:
        type: string
      price:
        type: number
      status:
        type: boolean
      stock:
        type: integer
    type: object
host: localhost:8081
info:
  contact: {}
  description: API for the catalog management.
  title: Catalog API
  version: "1.0"
paths:
  /category:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CategoryResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exceptions.ErrorResponseException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.ErrorResponseException'
      security:
      - BearerAuth: []
      summary: Get all categories
      tags:
      - Categories
    post:
      consumes:
      - application/json
      parameters:
      - description: Category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.CategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exceptions.ErrorResponseException'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exceptions.ErrorResponseException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.ErrorResponseException'
      security:
      - BearerAuth: []
      summary: Create a new category
      tags:
      - Categories
  /category/{categoryId}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Category ID
        in: path
        name: categoryId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exceptions.ErrorResponseException'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exceptions.ErrorResponseException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.ErrorResponseException'
      security:
      - BearerAuth: []
      summary: Get a category by ID
      tags:
      - Categories
  /category/{categoryId}/products:
    get:
      consumes:
      - application/json
      parameters:
      - description: Category ID
        in: path
        name: categoryId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exceptions.ErrorResponseException'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exceptions.ErrorResponseException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.ErrorResponseException'
      security:
      - BearerAuth: []
      summary: Get all products by category ID
      tags:
      - Categories
  /product:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exceptions.ErrorResponseException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.ErrorResponseException'
      security:
      - BearerAuth: []
      summary: Get all products
      tags:
      - Products
    post:
      consumes:
      - application/json
      parameters:
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.ProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ProductRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exceptions.ErrorResponseException'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exceptions.ErrorResponseException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.ErrorResponseException'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - Products
  /product/{productId}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exceptions.ErrorResponseException'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exceptions.ErrorResponseException'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.ErrorResponseException'
      security:
      - BearerAuth: []
      summary: Get a product by ID
      tags:
      - Products
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
